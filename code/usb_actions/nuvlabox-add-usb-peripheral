#!/usr/bin/env bash

#
# Classifies and attaches a new USB peripheral to this NuvlaBox, in Nuvla
#

set -e

buspath=$1
devnumber=$2
nb_id=$3
nb_version=$4
existing_peripheral_identifier=$5

if [[ -z ${buspath} ]] || [[ -z ${devnumber} ]] || [[ -z ${nb_id} ]] || [[ -z ${nb_version} ]]
then
    echo "ERR: this script needs the usb bus path, device number, NuvlaBox ID and version as inputs"
    exit 126
fi

if [[ -z ${PERIPHERALS_DIR} ]]
then
    export PERIPHERALS_DIR="${SHARED}/.peripherals"
    echo "WARN: the environment variable PERIPHERALS_DIR has not been set. Using default $PERIPHERALS_DIR."
fi

real_devnumber=$(echo ${devnumber} | sed 's/^0*//')

device="${buspath}${devnumber}"

if [[ ! -e "${device}" ]]
then
    exit 0
fi

busnum=$(udevadm info "${device}" -q property | grep BUSNUM | awk -F'=' '{print $2}')

simple_lsusb=$(lsusb -s ${devnumber} | grep "Bus ${busnum} ")
detailed_lsusb=$(lsusb -D ${device})
tree_lsusb=$(lsusb -t)

identifier=$(echo ${simple_lsusb} | cut -d " " -f6- | awk -F' ' '{print $1}')
nuvlabox_peripheral_filename="${PERIPHERALS_DIR}/${identifier}"

vendor=$(echo "${detailed_lsusb}" | grep idVendor | awk '{ for (i=3; i<=NF; i++) printf $i" " }')
product=$(echo "${detailed_lsusb}" | grep idProduct | awk '{ for (i=3; i<=NF; i++) printf $i" " }')

device_serial=$(udevadm info --attribute-walk $device | grep serial | grep -v ".usb" | awk -F'"' '{print $2}')

classes=""
lsusb_device=$(echo "${tree_lsusb}" | grep "Dev ${real_devnumber},")
while read lsusb_line
do
    if [[ ! -z ${lsusb_line} ]]
    then
        if [[ "${lsusb_line}" == "/:"* ]]
        then
            # this is a root device
            newclass=$(echo "${lsusb_line}" | awk -F'[,=]' '{print "\""$3"\","}')
        else
            newclass=$(echo "${lsusb_line}" | awk -F'[,=]' '{print "\""$4"\","}')
        fi

        if [[ "${classes}" != *"${newclass}"* ]]
        then
            # if the new class isn't listed yet
            classes="${classes}${newclass}"
        fi

        if [[ "$(echo ${newclass} | tr [:upper:] [:lower:])" == *"video"* ]]
        then
            # try to find the video device /dev/video*
            video_files=$(ls /dev/video* -1 | sort)
            for vf in $video_files
            do
                v_serial=$(udevadm info --attribute-walk -n $vf | grep serial | grep -v ".usb" | awk -F'"' '{print $2}')
                if [[ "${v_serial}" == "${device_serial}" ]]
                then
                    video_device=$vf
                    break
                fi
            done
        fi
    fi
done <<< "${lsusb_device}"

if [[ -z ${classes} ]]
then
    classes='"UNKNOWN",'
fi

ordered_classes=$(echo ${classes} | tr "," "\n" | sort | sed '/^[[:space:]]*$/d' | tr '\n' ',')
classes_final=$(echo "["${ordered_classes} | sed 's/,$/]/')

# Check if this is an external disk/flash drive, and get respective resource information
disk_by_id="/dev/disk/by-id"
matching_usb_disks=$(ls -d ${disk_by_id}/* | grep usb | grep "${device_serial}")
mounts=$(mount)
gb_in_bytes=1000000000
resources=''
for disk in ${matching_usb_disks}
do
  block_device=$(readlink -f ${disk})
  device_name=$(echo $block_device | awk -F'/' '{print $NF}')

  partitions=$(lsblk $block_device -o NAME,MOUNTPOINT,FSUSE%,SIZE -f -i -n -P)
  export $(echo "${partitions}" | grep "\"$device_name\"" | tr -d '%' | tr -d '"')

  capacity_gb=$SIZE
  unit=$block_device

  resource_json="{\"unit\": \"${unit}\", \"capacity\": \"${capacity_gb}\""
  if [ -n "$MOUNTPOINT" ] && [ -n "FSUSE" ]
  then
    # disk is mounted so we can get its usage
#    load=$(df -h $block_device --output=pcent | tail -1 | tr -d ' ' | tr -d '%')
    load=$FSUSE
    resource_json="${resource_json},\"load\": ${load}}"
  else
    resource_json="${resource_json}}"
  fi

  resources="${resources}${resource_json},"
done
resources=$(echo "${resources}" | sed 's/\(.*\),/\1 /')


interface="USB"
### TODO: this availability check should come from the system-manager
available=true
###

description="${interface} ${identifier} ${vendor} ${product}"
name="UNNAMED USB Device"

if [[ ! -z ${product} ]]
then
    name="${product}"
else
    if [[ ! -z ${description} ]]
    then
        name=${description}
    fi
fi

add_string_json() {
    # $1 is original json
    # $2 is attribute name
    # $3 is value
    echo $1 | jq --arg newarg "${3}" --arg key "${2}" '. + {($key): $newarg}'
}

# Create the payload
json=$( jq -n \
            --arg parent "${nb_id}" \
            --argjson version ${nb_version} \
            --argjson available ${available} \
            --arg interface "${interface}" \
            --argjson classes "${classes_final}" \
            --arg name "${name}" \
            --arg description "${description}" \
            --arg identifier "${identifier}" \
            '{  parent: $parent,
                version: $version,
                name: $name,
                description: $description,
                available: $available,
                interface: $interface,
                classes: $classes,
                identifier: $identifier}' )

if [[ ! -z ${resources} ]]
then
    json=$(add_string_json "${json}" "resources" "[${resources}]")
fi

if [[ ! -z ${product} ]]
then
    json=$(add_string_json "${json}" "product" "${product}")
fi

if [[ ! -z ${vendor} ]]
then
    json=$(add_string_json "${json}" "vendor" "${vendor}")
fi

if [[ ! -z ${device} ]]
then
    json=$(add_string_json "${json}" "device-path" "${device}")
fi

if [[ ! -z ${video_device} ]]
then
    json=$(add_string_json "${json}" "video-device" "${video_device}")
fi

if [[ ! -z ${device_serial} ]]
then
    json=$(add_string_json "${json}" "serial-number" "${device_serial}")
fi

########
## If this is an update, we need to compare the data with the existing peripheral
########
if [[ -z ${existing_peripheral_identifier} ]]
then
    echo "INFO: posting new peripheral to Nuvla: ${json}"

    (id=$(nuvla-client-post "nuvlabox-peripheral" "${json}") && \
        nuvla_id=$(echo "${id}" | awk -F' ' '{print $NF}') && \
        echo ${json} | jq --arg id "${nuvla_id}" '. + {id: $id}' > ${nuvlabox_peripheral_filename} && \
        echo "INFO: successfully registered peripheral ${identifier}" ) || echo "ERR: could not register new USB device ${identifier}!"

else
    # existing_peripheral_identifier is set, meaning that this peripheral exists already, so this is an UPDATE

    nuvlabox_peripheral_filename="${PERIPHERALS_DIR}/${existing_peripheral_identifier}"

    # diff returns >0 when there's a diff, and that's not an error for us
    set +e
    differences=$(diff --old-line-format="" \
                        --unchanged-line-format="" \
                        --new-line-format="%L" \
                        <(jq . -M -S < "${nuvlabox_peripheral_filename}") \
                        <(jq . -M -S <<< "${json}"))

    if [[ $? -gt 0 ]] && [[ ! -z ${differences} ]]
    then
        set -e
        echo "WARN: an existing peripheral has changed its configuration. Preparing to update ${existing_peripheral_identifier}"

        formed_diff_json="{ $(echo ${differences%","}) }"

        nuvla_id=$(jq -r .id "${nuvlabox_peripheral_filename}")
        nuvla-client-put ${nuvla_id} "${formed_diff_json}"
        new_peripheral_data=$(echo $(cat "${nuvlabox_peripheral_filename}") " " "${formed_diff_json}"  | jq -s add)
        echo "${new_peripheral_data}" | jq . > ${nuvlabox_peripheral_filename} && \
          echo "INFO: successfully updated USB peripheral ${existing_peripheral_identifier} with ${formed_diff_json}"
    fi
fi


